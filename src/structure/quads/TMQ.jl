#Reference
#岑松, 龙志飞, 龙驭球. 对转角场和剪应变场进行合理插值的厚薄板通用四边形单元[J]. 工程力学, 1999,16(4): 1―15.
function K_TMQ(elm::Quad)::Matrix{Float64}
    E₀,ν₀=elm.material.E,elm.material.ν
    center=elm.center
    t=elm.t
    T=elm.T[1:3,1:3]
    G=elm.material.G
    x₁,y₁,z₁=T*(elm.node1.loc-center)
    x₂,y₂,z₂=T*(elm.node2.loc-center)
    x₃,y₃,z₃=T*(elm.node3.loc-center)
    x₄,y₄,z₄=T*(elm.node4.loc-center)
    b₁=y₂-y₃
    b₂=y₃-y₄
    b₃=y₄-y₁
    b₄=y₁-y₂

    c₁=x₃-x₂
    c₂=x₄-x₃
    c₃=x₁-x₄
    c₄=x₂-x₁

    d₁=norm(elm.node3.loc-elm.node2.loc)
    d₂=norm(elm.node4.loc-elm.node3.loc)
    d₃=norm(elm.node1.loc-elm.node4.loc)
    d₄=norm(elm.node2.loc-elm.node1.loc)

    δ₁=(t/d₁)^2/(5/6*(1-ν₀)+2*(t/d₁)^2)
    δ₂=(t/d₂)^2/(5/6*(1-ν₀)+2*(t/d₂)^2)
    δ₃=(t/d₃)^2/(5/6*(1-ν₀)+2*(t/d₃)^2)
    δ₄=(t/d₄)^2/(5/6*(1-ν₀)+2*(t/d₄)^2)

    Γ=[0 0 0 -2δ₁ -c₁*δ₁ b₁*δ₁ 2δ₁ -c₁*δ₁ b₁*δ₁ 0 0 0;
       0 0 0 0 0 0 -2δ₂ -c₂*δ₂ b₂*δ₂ 2δ₂ -c₂*δ₂ b₂*δ₂;
       2δ₃ -c₃*δ₃ b₃*δ₃ 0 0 0 0 0 0 -2δ₃ -c₃*δ₃ b₃*δ₃;
      -2δ₄ -c₄*δ₄ b₄*δ₄ 2δ₄ -c₄*δ₄ b₄*δ₄ 0 0 0 0 0 0]

    Xₛ=[0 0 -b₄/(b₃*c₄-b₄*c₃) b₃/(b₃*c₄-b₄*c₃);
       b₄/(b₄*c₁-b₁*c₄) 0 0 -b₁/(b₄*c₁-b₁*c₄);
       -b₂/(b₁*c₂-b₂*c₁) b₁/(b₁*c₂-b₂*c₁) 0 0;
       0 -b₃/(b₂*c₃-b₃*c₂) b₂/(b₂*c₃-b₃*c₂) 0]

    Yₛ=[0 0 -c₄/(b₃*c₄-b₄*c₃) c₃/(b₃*c₄-b₄*c₃);
       c₄/(b₄*c₁-b₁*c₄) 0 0 -c₁/(b₄*c₁-b₁*c₄);
       -c₂/(b₁*c₂-b₂*c₁) c₁/(b₁*c₂-b₂*c₁) 0 0;
       0 -c₃/(b₂*c₃-b₃*c₂) c₂/(b₂*c₃-b₃*c₂) 0]

    α=[0 0 0 -3c₁/2/d₁^2*(1-2δ₁) 1/2/d₁^2*(b₁^2-c₁^2/2*(1-6δ₁)) 3b₁*c₁/4/d₁^2*(1-2δ₁) 3c₁/2/d₁^2*(1-2δ₁) 1/2/d₁^2*(b₁^2-c₁^2/2*(1-6δ₁)) 3b₁*c₁/4/d₁^2*(1-2δ₁) 0 0 0;
       0 0 0 0 0 0 -3c₂/2/d₂^2*(1-2δ₂) 1/2/d₂^2*(b₂^2-c₂^2/2*(1-6δ₂)) 3b₂*c₂/4/d₂^2*(1-2δ₂) 3c₂/2/d₂^2*(1-2δ₂) 1/2/d₂^2*(b₂^2-c₂^2/2*(1-6δ₂)) 3b₂*c₂/4/d₂^2*(1-2δ₂);
       3c₃/2/d₃^2*(1-2δ₃) 1/2/d₃^2*(b₃^2-c₃^2/2*(1-6δ₃)) 3b₃*c₃/4/d₃^2*(1-2δ₃) 0 0 0 0 0 0 -3c₃/2/d₃^2*(1-2δ₃) 1/2/d₃^2*(b₃^2-c₃^2/2*(1-6δ₃)) 3b₃*c₃/4/d₃^2*(1-2δ₃);
       -3c₄/2/d₄^2*(1-2δ₄) 1/2/d₄^2*(b₄^2-c₄^2/2*(1-6δ₄)) 3b₄*c₄/4/d₄^2*(1-2δ₄) 3c₄/2/d₄^2*(1-2δ₄) 1/2/d₄^2*(b₄^2-c₄^2/2*(1-6δ₄)) 3b₄*c₄/4/d₄^2*(1-2δ₄) 0 0 0 0 0 0]

    β=[0 0 0 3b₁/2/d₁^2*(1-2δ₁) 3b₁*c₁/4/d₁^2*(1-2δ₁) 1/2/d₁^2*(c₁^2-b₁^2/2*(1-6δ₁)) -3b₁/2/d₁^2*(1-2δ₁) 3b₁*c₁/4/d₁^2*(1-2δ₁) 1/2/d₁^2*(c₁^2-b₁^2/2*(1-6δ₁)) 0 0 0;
       0 0 0 0 0 0 3b₂/2/d₂^2*(1-2δ₂) 3b₂*c₂/4/d₂^2*(1-2δ₂) 1/2/d₂^2*(c₂^2-b₂^2/2*(1-6δ₂)) -3b₂/2/d₂^2*(1-2δ₂) 3b₂*c₂/4/d₂^2*(1-2δ₂) 1/2/d₂^2*(c₂^2-b₂^2/2*(1-6δ₂));
       -3b₃/2/d₃^2*(1-2δ₃) 3b₃*c₃/4/d₃^2*(1-2δ₃) 1/2/d₃^2*(c₃^2-b₃^2/2*(1-6δ₃)) 0 0 0 0 0 0 3b₃/2/d₃^2*(1-2δ₃) 3b₃*c₃/4/d₃^2*(1-2δ₃) 1/2/d₃^2*(c₃^2-b₃^2/2*(1-6δ₃));
       3b₄/2/d₄^2*(1-2δ₄) 3b₄*c₄/4/d₄^2*(1-2δ₄) 1/2/d₄^2*(c₄^2-b₄^2/2*(1-6δ₄)) -3b₄/2/d₄^2*(1-2δ₄) 3b₄*c₄/4/d₄^2*(1-2δ₄) 1/2/d₄^2*(c₄^2-b₄^2/2*(1-6δ₄)) 0 0 0 0 0 0]

    D₀=E₀*t^3/12/(1-ν₀^2)
    D=D₀*[1 ν₀ 0;
          ν₀ 1 0;
          0  0 (1-ν₀)/2]
    k=5/6
    C=k*G*t*[1 0;0 1]

    K=Matrix{Float64}(undef,12,12)
    J=Matrix{Float64}(undef,2,2)
    function BtDB(x)
        ξ,η=x[1],x[2]
        J[1,1]=-0.25*(1 - η)*x₁ + 0.25*(1 - η)*x₂ + 0.25*(1 + η)*x₃ - 0.25*(1 + η)*x₄
        J[1,2]=-0.25*(1 - η)*y₁ + 0.25*(1 - η)*y₂ + 0.25*(1 + η)*y₃ - 0.25*(1 + η)*y₄
        J[2,1]=-0.25*(1 - ξ)*x₁ + 0.25*(1 - ξ)*x₄ - 0.25*(1 + ξ)*x₂ + 0.25*(1 + ξ)*x₃
        J[2,2]=-0.25*(1 - ξ)*y₁ + 0.25*(1 - ξ)*y₄ - 0.25*(1 + ξ)*y₂ + 0.25*(1 + ξ)*y₃

        N₁⁰=1/4*(1-ξ)*(1-η)
        N₂⁰=1/4*(1+ξ)*(1-η)
        N₃⁰=1/4*(1+ξ)*(1+η)
        N₄⁰=1/4*(1-ξ)*(1+η)

        Nₛ⁰=[N₁⁰ N₂⁰ N₃⁰ N₄⁰]
        Bs=[Nₛ⁰*Xₛ*Γ;
            Nₛ⁰*Yₛ*Γ]

        dN₁dξ = -0.25*(1 - ξ)*(1 - η) + 0.25*(1 + η + ξ)*(1 - η)
        dN₁dη = -0.25*(1 - ξ)*(1 - η) + 0.25*(1 + η + ξ)*(1 - ξ)
        dN₂dξ = 0.25*(1 + ξ)*(1 - η) - 0.25*(1 + η - ξ)*(1 - η)
        dN₂dη = -0.25*(1 + ξ)*(1 - η) + 0.25*(1 + η - ξ)*(1 + ξ)
        dN₃dξ = 0.25*(1 + ξ)*(1 + η) - 0.25*(1 - η - ξ)*(1 + η)
        dN₃dη = 0.25*(1 + ξ)*(1 + η) - 0.25*(1 - η - ξ)*(1 + ξ)
        dN₄dξ = -0.25*(1 - ξ)*(1 + η) + 0.25*(1 - η + ξ)*(1 + η)
        dN₄dη = 0.25*(1 - ξ)*(1 + η) - 0.25*(1 - η + ξ)*(1 - ξ)
        dN₅dξ = 0.5*(1 - η^2)
        dN₅dη = -1.0*η*(1 + ξ)
        dN₆dξ = -1.0*ξ*(1 + η)
        dN₆dη = 0.5*(1 - ξ^2)
        dN₇dξ = -0.5*(1 - η^2)
        dN₇dη = -1.0*η*(1 - ξ)
        dN₈dξ = -1.0*ξ*(1 - η)
        dN₈dη = -0.5*(1 - ξ^2)
        # J=Matrix(1.0I,2,2)
        dN₁dx,dN₁dy=inv(J)*[dN₁dξ,dN₁dη]
        dN₂dx,dN₂dy=inv(J)*[dN₂dξ,dN₂dη]
        dN₃dx,dN₃dy=inv(J)*[dN₃dξ,dN₃dη]
        dN₄dx,dN₄dy=inv(J)*[dN₄dξ,dN₄dη]
        dN₅dx,dN₅dy=inv(J)*[dN₅dξ,dN₅dη]
        dN₆dx,dN₆dy=inv(J)*[dN₆dξ,dN₆dη]
        dN₇dx,dN₇dy=inv(J)*[dN₇dξ,dN₇dη]
        dN₈dx,dN₈dy=inv(J)*[dN₈dξ,dN₈dη]

        H₀=[0 dN₁dx     0 0 dN₂dx     0 0     dN₃dx 0 0     dN₄dx 0;
            0     0 dN₁dy 0     0 dN₂dy 0     0 dN₃dy 0     0 dN₄dy;
            0 dN₁dy dN₁dx 0 dN₂dy dN₂dx 0 dN₃dy dN₃dx 0 dN₄dy dN₄dx]

        H₁=[dN₅dx dN₆dx dN₇dx dN₈dx;
            0 0 0 0;
            dN₅dy dN₆dy dN₇dy dN₈dy]

        H₂=[0 0 0 0;
            dN₅dy dN₆dy dN₇dy dN₈dy;
            dN₅dx dN₆dx dN₇dx dN₈dx]

        Bb=-(H₀+H₁*α+H₂*β)

        Kb=transpose(Bb)*D*Bb
        Ks=transpose(Bs)*C*Bs
        K=Kb+Ks

        return K*det(J)
    end
    Kb=hcubature(BtDB,[-1,-1],[1,1])[1]
    #left-hand system to right-hand system
    I=1:12
    J=[1,3,2,4,6,5,7,9,8,10,12,11]
    L=sparse(I,J,1.,12,12)
    for i in [1,3,4,6,7,9,10,12]
        for j in [2,5,8,11]
            Kb[i,j]=Kb[j,i]=-Kb[i,j]
        end
    end
    K=L'*Kb*L
    #12x12 to 24x24
    I=1:12
    J=[3,4,5,9,10,11,15,16,17,21,22,23]
    L=sparse(I,J,1.,12,24)
    return L'*K*L
end

function K2_TMQ(elm::Quad)::Matrix{Float64}
    spzeros(24,24)
end

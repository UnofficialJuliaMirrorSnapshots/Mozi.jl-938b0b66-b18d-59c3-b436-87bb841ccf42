#Reference:
#Batoz J L, Tahar M B. Evaluation of a new quadrilateral thin plate bending element [J]. International Journal for Numerical Methods in Engineering, 1982, 18(11): 1655―1677.
function K_DKQ(elm::Quad)::Matrix{Float64}
    E₀,ν₀=elm.material.E,elm.material.ν
    center=elm.center
    t=elm.t
    T=elm.T[1:3,1:3]
    x₁,y₁,z₁=T*(elm.node1.loc.-center)
    x₂,y₂,z₂=T*(elm.node2.loc.-center)
    x₃,y₃,z₃=T*(elm.node3.loc.-center)
    x₄,y₄,z₄=T*(elm.node4.loc.-center)
    K=Matrix{Float64}(undef,12,12)
    J=Matrix{Float64}(undef,2,2)
    j=Matrix{Float64}(undef,2,2)

    function BtDB(r)
        ξ,η=r[1],r[2]
        x=[x₁,x₂,x₃,x₄]
        y=[y₁,y₂,y₃,y₄]

        xᵢⱼ=[x[i]-x[j] for (i,j) in zip([1,2,3,4],[2,3,4,1])]
        yᵢⱼ=[y[i]-y[j] for (i,j) in zip([1,2,3,4],[2,3,4,1])]
        lᵢⱼ²=xᵢⱼ.^2 .+ yᵢⱼ.^2

        a₅,a₆,a₇,a₈=-xᵢⱼ ./ lᵢⱼ²
        b₅,b₆,b₇,b₈=0.75*xᵢⱼ.*yᵢⱼ ./ lᵢⱼ²
        c₅,c₆,c₇,c₈=(0.25*xᵢⱼ.^2 .- 0.5*yᵢⱼ.^2) ./ lᵢⱼ²
        d₅,d₆,d₇,d₈=-yᵢⱼ ./ lᵢⱼ²
        e₅,e₆,e₇,e₈=(-0.25*xᵢⱼ.^2 .+ 0.5*yᵢⱼ.^2) ./ lᵢⱼ²

        dHˣdξ = [1.5*(0.5*a₈*(1 - η^2) - 1.0*ξ*(1 - η)*a₅), -1.0*ξ*(1 - η)*b₅, 0.25 + 0.25*η + 0.5*c₈*(1 - η^2) + 1.0*ξ*(1 - η)*c₅,1.5*(0.5*a₆*(1 - η^2) + 1.0*ξ*(1 - η)*a₅), 0.5*b₆*(1 - η^2), -0.5*c₆*(1 - η^2) + 1.0*ξ*(1 - η)*c₅ - 0.25*(1 + η), 1.5*(-0.5*a₆*(1 - η^2) - 1.0*ξ*(1 + η)*a₇), -1.0*ξ*(1 + η)*b₇, 0.25 + 0.25*η - 0.5*c₆*(1 - η^2) + 1.0*ξ*(1 + η)*c₇, 1.5*(-0.5*a₈*(1 - η^2) + 1.0*ξ*(1 + η)*a₇), -0.5*b₈*(1 - η^2), 0.25 + 0.25*η + 0.5*c₈*(1 - η^2) + 1.0*ξ*(1 + η)*c₇]
        dHˣdη = [1.5*(0.5*a₈*(1 - η^2) - 1.0*ξ*(1 - η)*a₅), -1.0*ξ*(1 - η)*b₅, 0.25 + 0.25*η + 0.5*c₈*(1 - η^2) + 1.0*ξ*(1 - η)*c₅,1.5*(0.5*a₆*(1 - η^2) + 1.0*ξ*(1 - η)*a₅), 0.5*b₆*(1 - η^2), -0.5*c₆*(1 - η^2) + 1.0*ξ*(1 - η)*c₅ - 0.25*(1 + η), 1.5*(-0.5*a₆*(1 - η^2) - 1.0*ξ*(1 + η)*a₇), -1.0*ξ*(1 + η)*b₇, 0.25 + 0.25*η - 0.5*c₆*(1 - η^2) + 1.0*ξ*(1 + η)*c₇, 1.5*(-0.5*a₈*(1 - η^2) + 1.0*ξ*(1 + η)*a₇), -0.5*b₈*(1 - η^2), 0.25 + 0.25*η + 0.5*c₈*(1 - η^2) + 1.0*ξ*(1 + η)*c₇]
        dHʸdξ = [1.5*(0.5*a₈*(1 - η^2) - 1.0*ξ*(1 - η)*a₅), -1.0*ξ*(1 - η)*b₅, 0.25 + 0.25*η + 0.5*c₈*(1 - η^2) + 1.0*ξ*(1 - η)*c₅,1.5*(0.5*a₆*(1 - η^2) + 1.0*ξ*(1 - η)*a₅), 0.5*b₆*(1 - η^2), -0.5*c₆*(1 - η^2) + 1.0*ξ*(1 - η)*c₅ - 0.25*(1 + η), 1.5*(-0.5*a₆*(1 - η^2) - 1.0*ξ*(1 + η)*a₇), -1.0*ξ*(1 + η)*b₇, 0.25 + 0.25*η - 0.5*c₆*(1 - η^2) + 1.0*ξ*(1 + η)*c₇, 1.5*(-0.5*a₈*(1 - η^2) + 1.0*ξ*(1 + η)*a₇), -0.5*b₈*(1 - η^2), 0.25 + 0.25*η + 0.5*c₈*(1 - η^2) + 1.0*ξ*(1 + η)*c₇]
        dHʸdη = [1.5*(0.5*a₈*(1 - η^2) - 1.0*ξ*(1 - η)*a₅), -1.0*ξ*(1 - η)*b₅, 0.25 + 0.25*η + 0.5*c₈*(1 - η^2) + 1.0*ξ*(1 - η)*c₅,1.5*(0.5*a₆*(1 - η^2) + 1.0*ξ*(1 - η)*a₅), 0.5*b₆*(1 - η^2), -0.5*c₆*(1 - η^2) + 1.0*ξ*(1 - η)*c₅ - 0.25*(1 + η), 1.5*(-0.5*a₆*(1 - η^2) - 1.0*ξ*(1 + η)*a₇), -1.0*ξ*(1 + η)*b₇, 0.25 + 0.25*η - 0.5*c₆*(1 - η^2) + 1.0*ξ*(1 + η)*c₇, 1.5*(-0.5*a₈*(1 - η^2) + 1.0*ξ*(1 + η)*a₇), -0.5*b₈*(1 - η^2), 0.25 + 0.25*η + 0.5*c₈*(1 - η^2) + 1.0*ξ*(1 + η)*c₇]

        x₁₂,x₂₃,x₃₄,x₄₁=xᵢⱼ
        y₁₂,y₂₃,y₃₄,y₄₁=xᵢⱼ
        x₂₁=-x₁₂
        x₃₂=-x₂₃
        y₂₁=-y₁₂
        y₃₂=-y₂₃
        # J[1,1]=0.25*(x₂₁+x₃₄+η*(x₁₂+x₃₄))
        # J[2,1]=0.25*(x₃₂+x₄₁+ξ*(x₁₂+x₃₄))
        # J[1,2]=0.25*(y₂₁+y₃₄+η*(y₁₂+y₃₄))
        # J[2,2]=0.25*(y₃₂+y₄₁+ξ*(y₁₂+y₃₄))
        J[1,1]=-0.25*(1 - η)*x₁ + 0.25*(1 - η)*x₂ + 0.25*(1 + η)*x₃ - 0.25*(1 + η)*x₄
        J[1,2]=-0.25*(1 - η)*y₁ + 0.25*(1 - η)*y₂ + 0.25*(1 + η)*y₃ - 0.25*(1 + η)*y₄
        J[2,1]=-0.25*(1 - ξ)*x₁ + 0.25*(1 - ξ)*x₄ - 0.25*(1 + ξ)*x₂ + 0.25*(1 + ξ)*x₃
        J[2,2]=-0.25*(1 - ξ)*y₁ + 0.25*(1 - ξ)*y₄ - 0.25*(1 + ξ)*y₂ + 0.25*(1 + ξ)*y₃

        detJ=det(J)
        j[1,1]=J[1,1]/detJ
        j[2,1]=-J[2,1]/detJ
        j[1,2]=-J[1,2]/detJ
        j[2,2]=J[2,2]/detJ
        @show detJ
        B=[j[1,1]*dHˣdξ+j[1,2]*dHˣdη j[2,1]*dHʸdξ+j[2,2]*dHʸdη j[1,1]*dHʸdξ+j[1,2]*dHʸdη+j[2,1]*dHˣdξ+j[2,2]*dHˣdξ]'
        D₀=E₀*t^3/12/(1-ν₀^2)
        D=D₀*[1 ν₀ 0;
              ν₀ 1 0;
              0  0 (1-ν₀)/2]
        return transpose(B)*D*B*detJ
    end
    K=hcubature(BtDB,[-1,-1],[1,1],initdiv=2)[1]
    #12x12 to 24x24
    I=1:12
    J=[3,4,5,9,10,11,15,16,17,21,22,23]
    L=sparse(I,J,1.,12,24)
    return L'*K*L
end
